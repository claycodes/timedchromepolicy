{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { FlatTreeControl } from '@angular/cdk/tree';\nimport { MatTreeFlatDataSource, MatTreeFlattener } from '@angular/material/tree';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../data-pipeline.service\";\nimport * as i2 from \"@angular/material/tree\";\nimport * as i3 from \"@angular/material/button\";\nimport * as i4 from \"@angular/material/icon\";\n\nfunction OrgunitCheckboxComponent_mat_tree_node_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"mat-tree-node\", 3);\n    i0.ɵɵelement(1, \"button\", 4);\n    i0.ɵɵelementStart(2, \"label\", 5);\n    i0.ɵɵelementStart(3, \"input\", 6);\n    i0.ɵɵlistener(\"change\", function OrgunitCheckboxComponent_mat_tree_node_1_Template_input_change_3_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r4);\n      const node_r2 = restoredCtx.$implicit;\n      const ctx_r3 = i0.ɵɵnextContext();\n      return ctx_r3.changeSelection(node_r2.id);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"span\");\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const node_r2 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"for\", node_r2.id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"id\", node_r2.id)(\"disabled\", ctx_r0.loading)(\"value\", node_r2.id);\n    i0.ɵɵattribute(\"data-orgpath\", node_r2.path);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(node_r2.name);\n  }\n}\n\nfunction OrgunitCheckboxComponent_mat_tree_node_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"mat-tree-node\", 3);\n    i0.ɵɵelementStart(1, \"button\", 7);\n    i0.ɵɵelementStart(2, \"mat-icon\", 8);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"label\", 5);\n    i0.ɵɵelementStart(5, \"input\", 9);\n    i0.ɵɵlistener(\"change\", function OrgunitCheckboxComponent_mat_tree_node_2_Template_input_change_5_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r7);\n      const node_r5 = restoredCtx.$implicit;\n      const ctx_r6 = i0.ɵɵnextContext();\n      return ctx_r6.changeSelection(node_r5.id);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"span\");\n    i0.ɵɵtext(7);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const node_r5 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"aria-label\", \"Toggle \" + node_r5.name);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.treeControl.isExpanded(node_r5) ? \"expand_more\" : \"chevron_right\", \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"for\", node_r5.id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"id\", node_r5.id)(\"value\", node_r5.id);\n    i0.ɵɵattribute(\"data-orgpath\", node_r5.path);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(node_r5.name);\n  }\n}\n\nexport let OrgunitCheckboxComponent = /*#__PURE__*/(() => {\n  class OrgunitCheckboxComponent {\n    constructor(data, ref) {\n      this.data = data;\n      this.ref = ref;\n\n      this._transformer = (node, level) => {\n        return {\n          expandable: !!node.children && node.children.length > 0,\n          name: node.name,\n          level: level,\n          id: node.orgUnitId,\n          path: node.orgUnitPath\n        };\n      };\n\n      this.orgUnits = [];\n      this.list = [];\n      this.loading = true;\n      this.selectedList = new EventEmitter();\n      this.treeControl = new FlatTreeControl(node => node.level, node => node.expandable);\n      this.treeFlattener = new MatTreeFlattener(this._transformer, node => node.level, node => node.expandable, node => node.children);\n      this.dataSource = new MatTreeFlatDataSource(this.treeControl, this.treeFlattener);\n\n      this.hasChild = (_, node) => node.expandable;\n    }\n\n    ngOnInit() {\n      this.orgUnits = this.data.orgUnits.getValue();\n      this.data.orgUnits.subscribe(orgs => {\n        this.orgUnits = orgs;\n\n        if (orgs[0].orgUnitId != 'loadid' || !orgs[0].orgUnitId) {\n          this.loading = false;\n        }\n\n        this.dataSource.data = orgs;\n        this.ref.detectChanges();\n      });\n      this.loadOrgs();\n    }\n\n    loadOrgs() {\n      this.data.getNestedOrgs();\n    }\n\n    changeSelection(value) {\n      if (document.getElementById(value).checked === true) {\n        const path = document.getElementById(value).dataset['orgpath'];\n        this.list.push({\n          id: value,\n          path: path\n        });\n      } else if (document.getElementById(value).checked === false) {\n        const elem = el => el.id === value;\n\n        const indexx = this.list.findIndex(elem);\n        this.list.splice(indexx, 1);\n      }\n\n      this.selectedList.emit(JSON.stringify(this.list));\n    }\n\n    uncheckAll() {\n      console.log('unchecking');\n      const ids = this.list.map(a => a.id);\n      ids.forEach(elem => {\n        document.getElementById(elem).checked = false;\n      });\n      this.list = [];\n    }\n\n  }\n\n  OrgunitCheckboxComponent.ɵfac = function OrgunitCheckboxComponent_Factory(t) {\n    return new (t || OrgunitCheckboxComponent)(i0.ɵɵdirectiveInject(i1.DataPipelineService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n  };\n\n  OrgunitCheckboxComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: OrgunitCheckboxComponent,\n    selectors: [[\"app-orgunit-checkbox\"]],\n    outputs: {\n      selectedList: \"selectedList\"\n    },\n    decls: 3,\n    vars: 3,\n    consts: [[3, \"dataSource\", \"treeControl\"], [\"matTreeNodePadding\", \"\", 4, \"matTreeNodeDef\"], [\"matTreeNodePadding\", \"\", 4, \"matTreeNodeDef\", \"matTreeNodeDefWhen\"], [\"matTreeNodePadding\", \"\"], [\"mat-icon-button\", \"\", \"disabled\", \"\"], [3, \"for\"], [\"type\", \"checkbox\", 1, \"nodecheck\", 3, \"id\", \"disabled\", \"value\", \"change\"], [\"mat-icon-button\", \"\", \"matTreeNodeToggle\", \"\"], [1, \"mat-icon-rtl-mirror\"], [\"type\", \"checkbox\", 1, \"nodecheck\", 3, \"id\", \"value\", \"change\"]],\n    template: function OrgunitCheckboxComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mat-tree\", 0);\n        i0.ɵɵtemplate(1, OrgunitCheckboxComponent_mat_tree_node_1_Template, 6, 6, \"mat-tree-node\", 1);\n        i0.ɵɵtemplate(2, OrgunitCheckboxComponent_mat_tree_node_2_Template, 8, 7, \"mat-tree-node\", 2);\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"dataSource\", ctx.dataSource)(\"treeControl\", ctx.treeControl);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"matTreeNodeDefWhen\", ctx.hasChild);\n      }\n    },\n    directives: [i2.MatTree, i2.MatTreeNodeDef, i2.MatTreeNode, i2.MatTreeNodePadding, i3.MatButton, i2.MatTreeNodeToggle, i4.MatIcon],\n    styles: [\".example-tree-node[_ngcontent-%COMP%]{display:flex;align-items:center}\"]\n  });\n  return OrgunitCheckboxComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}